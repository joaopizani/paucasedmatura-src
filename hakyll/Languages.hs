module Languages where

import Data.Char (toUpper)
import Prelude hiding (lookup)
import Data.Map (Map, fromList, lookup)

import Hakyll.Web.Template.Context (Context, functionField)
import Hakyll.Core.Identifier (toFilePath)
import Hakyll.Core.Item (Item(..))

import Prefixes (prs)


data Lang = PT | EN | DE deriving (Eq, Ord, Bounded, Enum, Read)

instance Show Lang where
    show PT = "pt"
    show EN = "en"
    show DE = "de"

languages :: [Lang]
languages = [minBound ..]

defaultLang :: Lang
defaultLang = EN


data TR = TR { ptT :: String, enT :: String, deT :: String } deriving (Eq, Ord, Read, Show)

newtype TRs = TRs { trMap :: Map String TR } deriving (Eq, Ord, Read, Show)


itemLang :: Item a -> Lang
itemLang item = if (length p > length prs) then (lFromPath p) else defaultLang
    where p         = toFilePath (itemIdentifier item)
          lFromPath = read . map toUpper . take 2 . drop (length prs)

trCtx :: Context a
trCtx = functionField "tr" $ \args item -> do
    let l = itemLang item
    k <- getArgs args
    translationRecord <- getVal k (trMap templateStrings)
    return $ (selector l) translationRecord
    where
        getArgs as = case as         of { [k]    -> return k;  _ -> fail "fail: trCtx - getArgs"}
        getVal k m = case lookup k m of { Just v -> return v;  _ -> fail "fail: trCtx - getVal"} 
        selector l = case l of {PT -> ptT;  EN -> enT;  DE -> deT}




-- All translation tuples, to be used in templates
templateStrings :: TRs
templateStrings = TRs $ fromList [
    -- default template
      ("langPT", TR { ptT = "Português", enT = "Portuguese", deT = "Portuguiesisch" })
    , ("langEN", TR { ptT = "Inglês",    enT = "English",    deT = "Englisch" })
    , ("langDE", TR { ptT = "Alemão",    enT = "German",     deT = "Deutsch" })

    , ("languages", TR { ptT = "Idiomas",   enT = "Languages", deT = "Sprachen"})
    , ("content",   TR { ptT = "Conteúdo",  enT = "Contents",  deT = "Inhalt"})

    , ("about",     TR { ptT = "Sobre mim",  enT = "About me",  deT = "Über mich" })
    , ("archive",   TR { ptT = "Posts",      enT = "Posts",     deT = "Posts" })
    , ("home",      TR { ptT = "Início",     enT = "Home",      deT = "Hauptseite" })
    , ("bib",       TR { ptT = "Biblioteca", enT = "Library",   deT = "Library" })

    , ("aboutLink",   TR { ptT = "/pt/joaopizani.html", enT = "/en/joaopizani.html", deT = "/de/joaopizani.html" })
    , ("archiveLink", TR { ptT = "/pt/posts.html",      enT = "/en/posts.html",      deT = "/de/posts.html" })
    , ("homeLink",    TR { ptT = "/pt/index.html",      enT = "/en/index.html",      deT = "/de/index.html" })
    , ("bibLink",     TR { ptT = "/pt/bib.html",           enT = "/en/bib.html",           deT = "/en/bib.html" })
    , ("bscLink",     TR { ptT = "/pt/bsc-overview.html",  enT = "/en/bsc-overview.html",  deT = "/en/bsc-overview.html" })
    , ("mscLink",     TR { ptT = "/pt/msc-overview.html",  enT = "/en/msc-overview.html",  deT = "/en/msc-overview.html" })
    , ("vhdlLink",    TR { ptT = "/pt/vhdl-tutorial.html", enT = "/en/vhdl-tutorial.html", deT = "/en/vhdl-tutorial.html" })

    , ("hakyllCR", TR { ptT = "Site orgulhosamente gerado usando"
                      , enT = "Site proudly generated by"
                      , deT = "Trotz herstellt mithilfe" })

    -- archive template
    , ("postsHeader", TR { ptT = "Aqui você pode encontrar todos os posts já publicados no blog:"
                         , enT = "Here you can find all of my previous posts:"
                         , deT = "Hier finden Sie alle einträge dieses Blogs:" })

    , ("cat-ac",      TR { ptT = "Academia",   enT = "Academia",      deT = "Akademisch" })
    , ("cat-haskell", TR { ptT = "Haskell",    enT = "Haskell",       deT = "Haskell" })
    , ("cat-tech",    TR { ptT = "Tecnologia", enT = "Technology",    deT = "Technologie" })
    , ("cat-misc",    TR { ptT = "Diversos",   enT = "Miscellaneous", deT = "Verschieden" })
    ]

